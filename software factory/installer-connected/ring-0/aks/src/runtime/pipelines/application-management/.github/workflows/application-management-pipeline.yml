name: Application Management Pipeline

on:
  push:
    branches:
      - '*'         # matches every branch
      - '*/*'       # matches every branch containing a single '/'

  # Run tests for any PRs to master.
  pull_request:
    branches:
      - master

env:
  CI_TOOLING_IMAGE: c12/ci-tooling 
  GIT_EMAIL: "c12@yourdomain.tld"
  GIT_NAME: "C12 Engineering"
  # Used for Terraform ENVs
  ARM_CLIENT_ID: ${{ secrets.AZURE_TF_SP_CREDENTIALS_APPID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_TF_SP_CREDENTIALS_PASSWORD }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  CI_ACR_NAME: ${{ secrets.CI_ACR_NAME }}
  IMAGE_REPOSITORY_PASSWORD: ${{ secrets.IMAGE_REPOSITORY_PASSWORD }}
  IMAGE_REPOSITORY_USERNAME: ${{ secrets.IMAGE_REPOSITORY_USERNAME }}
  IMAGE_REPOSITORY_SP_ID: ${{ secrets.IMAGE_REPOSITORY_SP_ID }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  PAT_USERNAME: ${{ secrets.PAT_USERNAME }}
  PREFIX: ${{ secrets.PREFIX }}
  
jobs:
### Pre build code checking
  generate-repos:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: login to OCI
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.CI_ACR_NAME }}.azurecr.io
        username: ${{ secrets.IMAGE_REPOSITORY_USERNAME }}
        password: ${{ secrets.IMAGE_REPOSITORY_PASSWORD }}
    - name: Pull CI-tooling from OCI
      run: docker pull ${{ secrets.CI_ACR_NAME }}.azurecr.io/$CI_TOOLING_IMAGE:latest
    - name: Check and Generate Ideal Repositories
      uses: ./.github/actions/generate-clone-repos

  

# ### Generate ideal State of the world
  generate-ideal-world:
    needs: [generate-repos]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: login to OCI
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.CI_ACR_NAME }}.azurecr.io
        username: ${{ secrets.IMAGE_REPOSITORY_USERNAME }}
        password: ${{ secrets.IMAGE_REPOSITORY_PASSWORD }}
    - name: Pull CI-tooling from OCI
      run: docker pull ${{ secrets.CI_ACR_NAME }}.azurecr.io/$CI_TOOLING_IMAGE:latest
    - name: Clone Required Repositories
      uses: ./.github/actions/clone-all-repos
    - name: Upsert deploy Keys for each app state
      uses: ./.github/actions/generate-deploy-keys
    - name: Push helm charts to clusters helm registries
      uses: ./.github/actions/push-helm-charts
    - name: Push docker images to clusters registries
      uses: ./.github/actions/push-docker-images
    - name: Generate Applications Helm Relases
      uses: ./.github/actions/generate-helm-releases
    - name: Create Ideal AAD groups and GitHub Teams state
      uses: ./.github/actions/create-aad-groups
    - name: Check and Generate Pipeline Secrets and Service Principals
      uses: ./.github/actions/generate-pipeline-secrets
    - name: Hydrates new applications source repos for required CI pipeline scripts and tools
      uses: ./.github/actions/hydrate-application-src-repos
    - name: Generate C12 Admin manifests
      uses: ./.github/actions/generate-application-admin-manifests
    - name: Commit all changes to repositories
      uses: ./.github/actions/commit-all-repos

