 {
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "namePrefix": {
      "type": "string",
      "metadata": {
        "displayName": "Resource Group and Resource name prefix",
        "description": "Resource Group and Resource identifier. String to be used as prefix to all Resource Group and Resource names."
      }
    },
    "hubName": {
      "type": "string",
      "defaultValue": "hub-shared",
      "metadata": {
        "displayName": "Hub Shared name",
        "description": "Hub Shared name."
      }
    },
    "deployment-user-object-id": {
      "type": "string",
      "metadata": {
        "displayName": "AAD object ID",
        "description": "AAD object ID of the user that requires access to Key Vault. To retrieve this value go to Microsoft Azure Portal > Azure Active Directory > Users > (user) and copy the User’s Object ID"
      }
    },
    "logs-retention-in-days": {
      "type": "int",
      "metadata": {
        "displayName": "Log retention in days",
        "description": "Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely"
      },
      "defaultValue": 365,
      "minValue": 0,
      "maxValue": 365
    },
    "secret-unique-value1": {
      "type": "string",
      "metadata": {
        "displayName": "Unique value1 for secret generation",
        "description": "Unique value that will be used to auto generate secrets"
      },
      "defaultValue": "[newGuid()]"
    },
    "secret-unique-value2": {
      "type": "string",
      "metadata": {
        "displayName": "Unique value2 for secret generation",
        "description": "Unique value that will be used to auto generate secrets"
      },
      "defaultValue": "[newGuid()]"
    },
    "secret-unique-value3": {
      "type": "string",
      "metadata": {
        "displayName": "Unique value3 for secret generation",
        "description": "Unique value that will be used to auto generate secrets"
      },
      "defaultValue": "[newGuid()]"
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    },
    "isOffline": {
      "type": "bool",
      "defaultValue": true
    }
  },
  "variables": {
    "deployment-prefix": "[toLower(concat(parameters('namePrefix'), '-', parameters('hubName')))]",
    "enable-vault-for-deployment": true,
    "enable-vault-for-templateDeployment": true,
    "enable-vault-for-diskEncryption": true,
    "vault-sku": "Premium",
    "vm-password": "[concat(toUpper(uniqueString(parameters('secret-unique-value1'))), uniqueString(parameters('secret-unique-value2')), toLower(uniqueString(parameters('secret-unique-value3'))), '@')]",
    "oms-workspace-resourceGroup": "[concat(variables('deployment-prefix'), '-rg')]",
    "oms-workspace-name": "[concat(variables('deployment-prefix'), '-log')]",
    "key-vault-user-managed-identity": "kv-usr-mgd-id",
    "key-vault-name": "[concat(variables('deployment-prefix'), '-kv')]",
    "enableSoftDelete": true,
    "bootstrapRoleAssignmentId": "[guid(concat(resourceGroup().id, 'contributor'))]",
    "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "uniqueString": "[uniqueString(subscription().id, concat(variables('deployment-prefix')))]",
    "diagnostic-storageAccount-prefix": "[concat(replace(variables('deployment-prefix'), '-', ''), 'diag')]",
    "diagnostic-storageAccount-name": "[toLower(substring(replace(concat(variables('diagnostic-storageAccount-prefix'), variables('uniqueString'), variables('uniqueString')), '-', ''), 0, 23) )]",
    "vnet-resourceGroup": "[concat(variables('deployment-prefix'), '-rg')]",
    "vnet-name": "[concat(variables('deployment-prefix'), '-vnet')]",
    "sharedsvcs-subnet-ID": "[concat(resourceId(variables('vnet-resourceGroup'), 'Microsoft.Network/virtualNetworks', variables('vnet-name')) , '/subnets/management')]",
    "key-vault-acl": {
      "bypass": "AzureServices",
      "defaultAction": "Allow",
      "virtualNetworkRules": [
        {
          "id": "[variables('sharedsvcs-subnet-ID')]"
        }
      ]
    },
    "secrets-object": {
      "secrets": [
        {
          "secretName": "jb-admin-user-password",
          "secretValue": "[variables('vm-password')]"
        },
        {
          "secretName": "app-windows-admin-user-password",
          "secretValue": "[variables('vm-password')]"
        },
        {
          "secretName": "app-linux-admin-user-password",
          "secretValue": "[variables('vm-password')]"
        },
        {
          "secretName": "disk-key-kek-kid",
          "secretValue": "kekurl"
        }
      ]
    }
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "condition": "[not(parameters('isOffline'))]",
      "apiVersion": "2018-11-30",
      "name": "[variables('key-vault-user-managed-identity')]",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "condition": "[not(parameters('isOffline'))]",
      "apiVersion": "2020-03-01-preview",
      "name": "[variables('bootstrapRoleAssignmentId')]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('key-vault-user-managed-identity'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
        "principalId": "[if(parameters('isOffline'), json('null'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('key-vault-user-managed-identity')), '2018-11-30').principalId)]",
        "scope": "[resourceGroup().id]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('key-vault-name')]",
      "dependsOn": [
        "[resourceId('Microsoft.Authorization/roleAssignments', variables('bootstrapRoleAssignmentId'))]"
      ],
      "apiVersion": "2019-09-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "[variables('key-vault-name')]"
      },
      "properties": {
        "enabledForDeployment": "[variables('enable-vault-for-deployment')]",
        "enabledForTemplateDeployment": "[variables('enable-vault-for-templateDeployment')]",
        "enabledForDiskEncryption": "[variables('enable-vault-for-diskEncryption')]",
        "enableSoftDelete": "[variables('enableSoftDelete')]",
        "enablePurgeProtection": true,
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('deployment-user-object-id')]",
            "permissions": {
              "certificates": [
                "All"
              ],
              "keys": [
                "All"
              ],
              "secrets": [
                "All"
              ]
            }
          }
        ],
        "sku": {
          "name": "[variables('vault-sku')]",
          "family": "A"
        },
        "networkAcls": "[if(parameters('isOffline'), json('null'), variables('key-vault-acl'))]"
      },
      "resources": [
        {
          "type": "Microsoft.KeyVault/vaults/providers/diagnosticsettings",
          "apiVersion": "2016-09-01",
          "name": "[concat(variables('key-vault-name'), '/Microsoft.Insights/service')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.KeyVault/vaults/', variables('key-vault-name'))]"
          ],
          "properties": {
            "storageAccountId": "[resourceId(variables('oms-workspace-resourceGroup'), 'Microsoft.Storage/storageAccounts', variables('diagnostic-storageAccount-name'))]",
            "workspaceId": "[resourceId(variables('oms-workspace-resourceGroup'), 'Microsoft.OperationalInsights/workspaces', variables('oms-workspace-name'))]",
            "logs": [
              {
                "category": "AuditEvent",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('logs-retention-in-days')]"
                }
              }
            ],
            "metrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('logs-retention-in-days')]"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/locks",
      "apiVersion": "2016-09-01",
      "name": "[concat(variables('key-vault-name'), '/Microsoft.Authorization/keyVaultDoNotDelete')]",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('key-vault-name'))]"
      ],
      "comments": "Resource lock on key vault",
      "properties": {
        "level": "CannotDelete"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "name": "[concat(variables('key-vault-name'), '/add')]",
      "condition": "[not(parameters('isOffline'))]",
      "apiVersion": "2016-10-01",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('key-vault-name'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', variables('bootstrapRoleAssignmentId'))]"
      ],
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[if(parameters('isOffline'), json('null'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('key-vault-user-managed-identity')), '2018-11-30').principalId)]",
            "permissions": {
              "keys": [
                "all"
              ],
              "secrets": [
                "all"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('key-vault-name'), '/', variables('secrets-object').secrets[copyIndex()].secretName)]",
      "apiVersion": "2019-09-01",
      "properties": {
        "value": "[variables('secrets-object').secrets[copyIndex()].secretValue]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('key-vault-name'))]"
      ],
      "copy": {
        "name": "secretsCopy",
        "count": "[length(variables('secrets-object').secrets)]"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2019-10-01-preview",
      "name": "createAzureKeyVaultKey",
      "location": "[resourceGroup().location]",
      "condition": "[not(parameters('isOffline'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('key-vault-name'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', variables('bootstrapRoleAssignmentId'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('key-vault-user-managed-identity'))]": {}
        }
      },
      "kind": "AzurePowerShell",
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "azPowerShellVersion": "3.0",
        "timeout": "PT30M",
        "arguments": "[format(' -VaultName {0} -StorageAcctName {1} -ResourceGroupName {2} -LocationName {3} -DeployPrefix {4}', variables('key-vault-name'), variables('diagnostic-storageAccount-name'), variables('oms-workspace-resourceGroup'), resourceGroup().location, variables('deployment-prefix'))]",
        "scriptContent": "
              param(
                [string
            ] [Parameter(Mandatory=$true)
            ] $VaultName,
            [string
            ] [Parameter(Mandatory=$true)
            ] $StorageAcctName,
            [string
            ] [Parameter(Mandatory=$true)
            ] $ResourceGroupName,
            [string
            ] [Parameter(Mandatory=$true)
            ] $LocationName,
            [string
            ] [Parameter(Mandatory=$true)
            ] $DeployPrefix  
              )
        
              $ErrorActionPreference = 'Stop'
              $DeploymentScriptOutputs = @{}

              $KeyName = $DeployPrefix + '-disk-encryption-key'
              $StorageAcctKeyName = $DeployPrefix + '-sa-diag-encryption-key'
              $DiskEncryptionSetName = $DeployPrefix + '-disk-encryption-set'
              $kekEncryptionUrlSecretName = 'disk-key-kek-kid'

              ###JACK: Add user managed identity to KV access policy here

              # Get KeyVault
              $kv =  Get-AzKeyVault -Name $VaultName -ResourceGroupName $ResourceGroupName
              
              # Check if Disk Encryption Key exists
              $diskEncrptKey = `
                (Get-AzKeyVaultKey `
                    -VaultName $VaultName `
                    -Name $KeyName `
                    -ErrorAction SilentlyContinue).Id;
                
                # Create New Disk Encryption Key
                if ($null -eq $diskEncrptKey) {
                  $diskEncrptKey = (Add-AzKeyVaultKey `
                        -VaultName $VaultName `
                        -Name $KeyName `
                        -Destination 'HSM').Id;
            }

                # Check if Storage Account Encryption Key exists
                $storAcctKey = `
                (Get-AzKeyVaultKey `
                    -VaultName $VaultName `
                    -Name $StorageAcctKeyName `
                    -ErrorAction SilentlyContinue).Id;

                # Create New Storage Account Encryption Key
                if ($null -eq $storAcctKey) {
                  $storAcctKey = (Add-AzKeyVaultKey `
                        -VaultName $VaultName `
                        -Name $StorageAcctKeyName `
                        -Destination 'Software').Id;
            }
                
                # Get Disk Encryption Newly Created Key
                $diskEncrptKey = (Get-AzKeyVaultKey `
                    -VaultName $VaultName `
                    -Name $KeyName)

                # Update secret for KeK encryption with KV KeK URL
                  $secretvalue = ConvertTo-SecureString $diskEncrptKey.Key.Kid -AsPlainText -Force
                  $secret = Set-AzKeyVaultSecret -VaultName $VaultName -Name $kekEncryptionUrlSecretName -SecretValue $secretvalue

                # Create New Disk Encryption Set Config
                $desConfig = (New-AzDiskEncryptionSetConfig `
                      -Location $LocationName `
                      -SourceVaultId $kv.ResourceId `
                      -KeyUrl $diskEncrptKey.Key.Kid `
                      -IdentityType SystemAssigned)
                    
                # Create New Disk Encryption Set
                $desEncrySet = (New-AzDiskEncryptionSet `
                          -Name $DiskEncryptionSetName `
                          -ResourceGroupName $ResourceGroupName `
                          -InputObject $desConfig)

                # Get newly created disk encryption Set
                $des = (Get-AzDiskEncryptionSet `
                    -ResourceGroupName $ResourceGroupName `
                    -Name $DiskEncryptionSetName)
                      
                # Add the Disk Encryption Set Application to Key Vault Access Policy
                (Set-AzKeyVaultAccessPolicy `
                      -VaultName $VaultName `
                      -ObjectId $des.Identity.PrincipalId `
                      -PermissionsToKeys wrapkey,unwrapkey,get `
                      -BypassObjectIdValidation)

               # Encrypt Storage Account that is deployed in ZTA
               # Set Managed identity in storage account:
                $storageAccount = (Set-AzStorageAccount `
                    -ResourceGroupName $ResourceGroupName `
                    -Name $StorageAcctName `
                    -AssignIdentity)
              
              # Add Storage Account identity to KeyVault Access Policy
              (Set-AzKeyVaultAccessPolicy `
                  -VaultName $kv.VaultName `
                  -ObjectId $storageAccount.Identity.PrincipalId `
                  -PermissionsToKeys wrapkey,unwrapkey,get `
                  -BypassObjectIdValidation)
              
              # Get Storage Account Encryption Newly Created Key
              $storAcctKey = (Get-AzKeyVaultKey `
                  -VaultName $VaultName `
                  -Name $StorageAcctKeyName)

              # Encrypt the storage account with Key Vault Key
                (Set-AzStorageAccount -ResourceGroupName $ResourceGroupName `
                      -AccountName $StorageAcctName `
                      -KeyvaultEncryption `
                      -KeyName $storAcctKey.Name `
                      -KeyVersion $storAcctKey.Version `
                      -KeyVaultUri $kv.VaultUri)

              # Now that all KV actions are done, remove the network access
              Update-AzKeyVaultNetworkRuleSet -VaultName $VaultName -DefaultAction Deny
              
            ",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    }
  ],
  "outputs": {}
}
