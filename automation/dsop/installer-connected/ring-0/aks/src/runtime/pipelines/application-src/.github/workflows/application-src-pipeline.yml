name: Application Source CI

on:
  push:
    branches:
      - '*'         # matches every branch
      - '*/*'       # matches every branch containing a single '/'

  pull_request:
    branches:
      - master


env:
  REPO_GITHUB: ${{github.repository}}
  # image tooling versions
  IMAGE_DEPENDENCY_CHECK: owasp/dependency-check


jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Get all tags"
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Run a multi-line script
      run: |
        function compile () {
          echo "compile Example"
          case "$1" in
          "mvn")
              echo "mvn clean install"
              exit 0
              ;;
          "go" | "gobuild")
              echo "go build"
              exit 0
              ;;
          "npm")
              echo "npm install"
              npm install
              exit 0
              ;;
          *)
              echo "Unknown Compile step \'$1\'"
              exit 1
              ;;
          esac
        }
        compile npm .
    - name: Upload compiled project
      uses: actions/upload-artifact@v1
      with:
          name: compiled-project
          path: ./


  lint:
    needs: compile
    runs-on: ubuntu-latest
    steps:
    - name: Download Compiled Project
      uses: actions/download-artifact@v1
      with:
        name: compiled-project
    - name: Run a multi-line script
      run: |
        mkdir results
        zip -r lint-results.zip . -i results\*
    - name: Upload results for Lint job
      uses: actions/upload-artifact@v1
      with:
          name: lint-results
          path: lint-results.zip


  unit-test:
    needs: compile
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Download Compiled Project
      uses: actions/download-artifact@v1
      with:
        name: compiled-project
    - name: Run a multi-line script
      run: |
        mkdir results
        function unit_test () {
          echo "Unit Test Example"
          case "$1" in
          "mvn")
              echo "mvn test-DskipITs=true"
              exit 0
              ;;
          "go" | "gotest")
              echo "go test"
              exit 0
              ;;
          "npm" )
              echo "npm test"
              npm test
              exit 0
              ;;
          *)
              echo "Unknown test step \'$1\'"
              exit 1
              ;;
          esac
        }
        unit_test npm . | results/unit-test-results.txt| zip -r unit-test-results.zip . -i results\*
    - name: Upload results for unit-test job
      uses: actions/upload-artifact@v1
      with:
          name: unit-test-results
          path: unit-test-results.zip

  integration-test:
    needs: compile
    runs-on: ubuntu-latest
    steps:
    - name: Download Compiled Project
      uses: actions/download-artifact@v1
      with:
        name: compiled-project
    - name: Run a multi-line script
      run: |
        mkdir results

        function integration_test () {
          echo "Integration Test Example"
          case "$1" in
          "mvn")
              echo "mvn test -DskipITs=false"
              exit 0
              ;;
          "go" | "gotest")
              echo "go test -run 'Integration'"
              exit 0
              ;;
          "npm" )
              echo "npm test"
              npm test
              exit 0
              ;;
          *)
              echo "Unknown integration test step \'$1\'"
              exit 1
              ;;
          esac
        }
        integration_test npm . | results/integration-test-results.txt| zip -r integration-test-results.zip . -i results\*
    - name: Upload results for integration-test job
      uses: actions/upload-artifact@v1
      with:
          name: integration-test-results
          path: integration-test-results.zip

  dependency-checks:
    needs: compile
    runs-on: ubuntu-latest
    steps:
    - name: Download Compiled Project
      uses: actions/download-artifact@v1
      with:
        name: compiled-project
    - name: Run a multi-line script
      run: |
        mkdir results

        function dependency_checks () {
          echo "dependency_checks"

          if [ -z "$IMAGE_DEPENDENCY_CHECK" ]
            then
              echo "IMAGE_DEPENDENCY_CHECK is not set"
              exit 1
          fi

          if [ "$1" ]
          then
            docker run --rm --volume "$(pwd)":/src "$IMAGE_DEPENDENCY_CHECK" --scan "$1" --format "ALL" --out "$(pwd)/reports/dependency_checks/"
            echo "Reports Location: '$(pwd)'/reports/dependency_checks/"
            return 0
          else
            echo "No args.."
            echo "The program can scan code and dependency for OSWAP known vulnerabilities, required Arugment scanning dir path."
            return 1
          fi
        }

        dependency_checks "." | zip -r dependency-checks-results.zip . -i results\*
    - name: Upload results for dependency-checks job
      uses: actions/upload-artifact@v1
      with:
          name: dependency-checks-results
          path: dependency-checks-results.zip


  image-build:
    needs: [compile, lint, unit-test, integration-test, dependency-checks]
    runs-on: ubuntu-latest
    steps:
    - name: Download Compiled Project
      uses: actions/download-artifact@v1
      with:
        name: compiled-project
    - name: Download lint-results
      uses: actions/download-artifact@v1
      with:
        name: lint-results
    - name: Download Unit Test Results
      uses: actions/download-artifact@v1
      with:
        name: unit-test-results
    - name: Download Integration Test Results
      uses: actions/download-artifact@v1
      with:
        name: integration-test-results
    - name: Download Dependency Checks Results
      uses: actions/download-artifact@v1
      with:
        name: dependency-checks-results

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get git history
      run: git pull

    - name: Run a multi-line script
      run: |

        # Normalizes according to docker hub organization/image naming conventions:
        normalize() {
          echo "$1" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]//g'
        }

        lowerize() {
          echo "$1" | tr '[:upper:]' '[:lower:]'
        }

        # Builds an image for each git branch of the given Dockerfile directory:
        build_versions() {
          image="$1"
          # unset image var
          shift 1
          git_tag="$(git describe --long --tags)"
          docker build -t "$image:$git_tag" "$@" .
        }


        # Builds an image for each git branch of the given Dockerfile directory:
        build() {
          cwd="$PWD"
          file="$(basename "$1")"
          dir="$(dirname "$1")"
          cd "$dir" || return 1
          organization="${{ secrets.CI_ACR_NAME }}.azurecr.io"
          if [ -z "$organization" ]; then
            # Use the parent folder for the organization/user name:
            organization="$(cd ../.. && normalize "$(basename "$PWD")")"
          fi
          # Use the REPO_GITHUB env for the image name:
          image="$organization/$(lowerize $REPO_GITHUB)"
          # Check if the image depends on another image of the same organization:
          echo -n '${{ secrets.IMAGE_REPOSITORY_PASSWORD }}' | docker login "${{ secrets.CI_ACR_NAME }}.azurecr.io" --username "${{ secrets.IMAGE_REPOSITORY_USERNAME }}" --password-stdin
          # docker pull "$image"
          build_versions "$image" -f "$file"
          status=$?
          cd "$cwd" || return 1
          return $status
        }

        # Builds and tags images for each Dockerfile in the arguments list:
        build_images() {
          for file; do
            # Shift the arguments list to remove the current Dockerfile:
            shift
            # Basic check if the file is a valid Dockerfile:
            if ! grep '^FROM ' "$file"; then
              echo "Invalid Dockerfile: $file" >&2
              continue
            else
              build "$file"
            fi
          done
        }

        NEWLINE='
        '
        # finds Dockerfiles and starts the builds:
        find_dockerfiles() {
          dockerfiles_list=
          for arg; do
            if [ -d "$arg" ]; then
              # Search for Dockerfiles and add them to the list:
              dockerfiles_list="$dockerfiles_list$NEWLINE$(find "$arg" -name Dockerfile)"
            else
              dockerfiles_list="$dockerfiles_list$NEWLINE$arg"
            fi
          done
          # Set the list as arguments, splitting only at newlines:
          IFS="$NEWLINE";
          # shellcheck disable=SC2086
          set -- $dockerfiles_list;
          unset IFS
          build_images "$@"
        }

        function image_build () {
          # finds Dockerfiles and starts the builds:
          find_dockerfiles "${@:-.}"
        }

        # Usage:image_build [Dockerfile|directory] [...]

        image_build "./"
        docker images
        echo "docker images | grep $REPO_GITHUB"
        docker save "$organization/$(lowerize $REPO_GITHUB)" -o image-build.tar.gz

    - name: Upload Image from Build job
      uses: actions/upload-artifact@v1
      with:
          name: image-build
          path: image-build.tar.gz

  image-scanning:
    needs: image-build
    runs-on: ubuntu-latest
    steps:
    - name: Download Built image
      uses: actions/download-artifact@v1
      with:
        name: image-build
        path: ./
    - name: Run a multi-line script
      run: |
        echo image-build,
        # docker load -i image-build.tar.gz

        mkdir results
        zip -r image-scanning-results.zip . -i results\*

    - name: Upload results for image-scanning job
      uses: actions/upload-artifact@v1
      with:
          name: image-scanning-results
          path: image-scanning-results.zip

  image-functional-test:
    needs: image-build
    runs-on: ubuntu-latest
    steps:
    - name: Download Built image
      uses: actions/download-artifact@v1
      with:
        name: image-build
        path: ./
    - name: Run a multi-line script
      run: |
        echo image-functional-test,
        # docker load -i image-build.tar.gz
        mkdir results
        zip -r image-functional-test-results.zip . -i results\*
    - name: Upload results for image-functional-test job
      uses: actions/upload-artifact@v1
      with:
          name: image-functional-test-results
          path: image-functional-test-results.zip

  image-integration-test:
    needs: image-build
    runs-on: ubuntu-latest
    steps:
    - name: Download Built image
      uses: actions/download-artifact@v1
      with:
        name: image-build
        path: ./
    - name: Run a multi-line script
      run: |
        echo image-integration-test,
        # docker load -i image-build.tar.gz
        mkdir results
        zip -r image-integration-test.zip . -i results\*
    - name: Upload results for image-integration-test job
      uses: actions/upload-artifact@v1
      with:
          name: image-integration-test
          path: image-integration-test.zip

  image-singing:
    # master branch only
    if: github.ref == 'refs/heads/master'
    needs: [image-build, image-scanning, image-functional-test, image-integration-test]
    runs-on: ubuntu-latest
    steps:
    - name: Download Built image
      uses: actions/download-artifact@v1
      with:
        name: image-build
        path: ./
    - name: Download Image Scanning Results
      uses: actions/download-artifact@v1
      with:
        name: image-scanning-results
    - name: Download Image Functional Test Results
      uses: actions/download-artifact@v1
      with:
        name: image-functional-test-results
    - name: Download Image Integration Test
      uses: actions/download-artifact@v1
      with:
        name: image-integration-test
    - name: Run a multi-line script
      run: |
        echo image-singing,
        echo test, and deploy your project.
        docker load -i image-build.tar.gz

        # docker save $(docker ps | grep $(REPO_GITHUB) | awk '{ print $1 }') -o singed-image-build.tar.gz
        mv image-build.tar.gz singed-image-build.tar.gz # TEMP
    - name: Upload Singed Image from singing job
      uses: actions/upload-artifact@v1
      with:
          name: singed-image-build
          path: singed-image-build.tar.gz

  image-push-to-oci:
    # master branch only
    if: github.ref == 'refs/heads/master'
    needs: image-singing
    runs-on: ubuntu-latest
    steps:
    - name: Download Singed Image Build
      uses: actions/download-artifact@v1
      with:
        name: singed-image-build
        path: ./
    - name: Run a multi-line script
      run: |

        lowerize() {
          echo "$1" | tr '[:upper:]' '[:lower:]'
        }

        function image_publishing () {
            # Create variables for arguments
            ACR_IMAGE_URL="$1"
            APP_IMAGE_NAME="$2"
            # Log in to DEV ACR with service principal credentials
            echo -n '${{ secrets.IMAGE_REPOSITORY_PASSWORD }}' | docker login "${{ secrets.CI_ACR_NAME }}.azurecr.io" --username "${{ secrets.IMAGE_REPOSITORY_USERNAME }}" --password-stdin
            # Get the local image ID using the digest
            docker push "${{ secrets.CI_ACR_NAME }}.azurecr.io"/"$APP_IMAGE_NAME"
            docker logout "${{ secrets.CI_ACR_NAME }}.azurecr.io"
        }

        docker load -i singed-image-build.tar.gz
        image_publishing ${{ secrets.CI_ACR_NAME }}.azurecr.io "$(lowerize "$REPO_GITHUB")"
