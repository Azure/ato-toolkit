input {
  tcp {
    port => {{ bosh.port }}
    mode => "server"
    ssl_enable => true
    ssl_key => "{{ ssl.key_path }}"
    ssl_cert => "{{ ssl.cert_path }}"
    ssl_certificate_authorities => ["{{ ssl.ca_path }}"]
    codec => plain
    ssl_verify => false
    dns_reverse_lookup_enabled => true
  }
}

filter {
  grok {
    match => { "message" => "\<%{NUMBER:num}\>1 %{TIMESTAMP_ISO8601:bosh.timestamp} %{IP:host_ip} %{DATA:data1} %{DATA:data2} \- \[%{GREEDYDATA:instance}\@%{GREEDYDATA:instance_num} %{GREEDYDATA:bosh_kv}\] %{IPORHOST:bosh.log.clientip} %{USER:bosh.log.ident} %{USER:bosh.log.auth} \[%{HTTPDATE:bosh.log.timestamp}\] (?:%{WORD:bosh.log.verb} %{NOTSPACE:bosh.log.request}(?: HTTP/%{NUMBER:bosh.log.httpversion})?|%{DATA:bosh.log.rawrequest}) %{NUMBER:bosh.log.response} (?:%{NUMBER:bosh.log.bytes}|-)" }
    remove_field => [ "num", "host_ip", "data1", "data2", "instance", "instance_num" ]
  }
  kv {
    source => "bosh_kv"
    target => "bosh"
    remove_field => [ "bosh_kv", "message" ]
  }
}
	
filter {
  if "_grokparsefailure" in [tags] {
    mutate {
      remove_field => [ "tags" ]
    }
    grok {
      match => { "message" => "\<%{NUMBER:num}\>1 %{TIMESTAMP_ISO8601:bosh.timestamp} %{IP:host_ip} %{DATA:data1} %{DATA:data2} \- \[%{GREEDYDATA:instance}\@%{INT:instance_num} %{GREEDYDATA:bosh_kv}\] \[%{TIMESTAMP_ISO8601:bosh.log.timestamp}\] %{DATA:bosh.client} \- %{GREEDYDATA:data3} .... %{LOGLEVEL:bosh.log.level} \-\-\- %{GREEDYDATA:bosh.log.messagge}" }
      remove_field => [ "num", "host_ip", "data1", "data2", "data3", "instance", "instance_num" ]
    }
    kv {
      source => "bosh_kv"
      target => "bosh"
      remove_field => [ "bosh_kv", "message" ]
    }
  }
}

filter {
  if "_grokparsefailure" in [tags] {
    mutate {
      remove_field => [ "tags" ]
    }
    grok {
      match => { "message" => "\<%{NUMBER:num}\>1 %{TIMESTAMP_ISO8601:bosh.timestamp} %{IP:host_ip} %{DATA:bosh.client} \- \- \[%{GREEDYDATA:instance}\@%{INT:instance_num} %{GREEDYDATA:bosh_kv1}\] %{GREEDYDATA:bosh_kv2}" }
      remove_field => [ "num", "host_ip", "instance", "instance_num" ]
    }
    kv {
      source => "bosh_kv1"
      target => "bosh"
      remove_field => [ "bosh_kv1", "message" ]
    }
    kv {
      source => "bosh_kv2"
      target => "bosh"
      remove_field => [ "bosh_kv2" ]
    }
  }
}

filter {
  if "_grokparsefailure" in [tags] {
    mutate {
      remove_field => [ "tags" ]
    }
    grok {
      match => { "message" => "\<%{NUMBER:num}\>1 %{TIMESTAMP_ISO8601:bosh.timestamp} %{IP:host_ip} %{DATA:bosh.client} %{DATA:data1} \- \[%{GREEDYDATA:instance}\@%{NUMBER:instance_num} %{GREEDYDATA:bosh_kv1}\] %{DATA:loglevel}, \[%{GREEDYDATA:bosh.log.timestamp} \#%{NUMBER:num2}\] \[%{GREEDYDATA:bosh.client}\]%{SPACE}%{LOGLEVEL:bosh.log.level} \-\- %{GREEDYDATA:bosh.log.messagge}" }
      remove_field => [ "num", "num2", "host_ip", "instance", "instance_num", "data1", "loglevel" ]
    }
    kv {
      source => "bosh_kv1"
      target => "bosh"
      remove_field => [ "bosh_kv1", "message" ]
    }
    kv {
      source => "bosh_kv2"
      target => "bosh"
      remove_field => [ "bosh_kv2" ]
    }
  }
}

filter {
  if "_grokparsefailure" in [tags] {
    mutate {
      remove_field => [ "tags" ]
    }
    grok {
      match => { "message" => "\<%{NUMBER:num}\>1 %{TIMESTAMP_ISO8601:bosh.timestamp} %{IP:host_ip} %{DATA:bosh.client} %{DATA:data1} \- \[%{GREEDYDATA:instance}\@%{NUMBER:instance_num} %{GREEDYDATA:bosh_kv1}\] %{DATA:loglevel}, \[%{GREEDYDATA:bosh.log.timestamp} \#%{NUMBER:num2}\]%{SPACE}%{LOGLEVEL:bosh.log.level} \: %{GREEDYDATA:bosh.log.messagge}" }
      remove_field => [ "num", "num2", "host_ip", "instance", "instance_num", "data1", "loglevel" ]
    }
    kv {
      source => "bosh_kv1"
      target => "bosh"
      remove_field => [ "bosh_kv1", "message" ]
    }
    kv {
      source => "bosh_kv2"
      target => "bosh"
      remove_field => [ "bosh_kv2" ]
    }
  }
}

filter {
  if "_grokparsefailure" in [tags] {
    mutate {
      remove_field => [ "tags" ]
    }
    grok {
      match => { "message" => "\<%{NUMBER:num}\>1 %{TIMESTAMP_ISO8601:bosh.timestamp} %{IP:host_ip} %{DATA:bosh.client} %{DATA:data1} \- \[%{GREEDYDATA:instance}\@%{NUMBER:instance_num} %{GREEDYDATA:bosh_kv1}\] %{GREEDYDATA:bosh.log.messagge}" }
      remove_field => [ "num", "host_ip", "instance", "instance_num", "data1" ]
    }
    kv {
      source => "bosh_kv1"
      target => "bosh"
      remove_field => [ "bosh_kv1", "message" ]
    }
    kv {
      source => "bosh_kv2"
      target => "bosh"
      remove_field => [ "bosh_kv2" ]
    }
  }
}

filter {
  mutate {
    add_field => { "pipeline_host" => "{{ inventory_hostname }}" }
    add_field => { "logging_app" => "bosh" }
    rename => { "host" => "bosh.host" }
  }
}

output {
  elasticsearch {
    hosts => ["https://{{ elasticsearch.lb_ip }}:{{ elasticsearch.port }}"]
    index => "{{ bosh.pipeline.index_pattern }}"
    ssl_certificate_verification => false
    user => "{{ bosh.pipeline.username }}"
    password => "{{ bosh.pipeline.password }}"
    ssl => true
  }
}