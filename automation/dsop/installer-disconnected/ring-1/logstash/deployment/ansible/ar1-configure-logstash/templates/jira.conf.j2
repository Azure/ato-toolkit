input {
  beats {
    port => {{ jira.port }}
    id => "filebeat-jira"
    ssl => true
    ssl_key => "{{ ssl.key_path }}"
    ssl_certificate => "{{ ssl.cert_path }}"
    ssl_certificate_authorities => ["{{ ssl.ca_path }}"]
    ssl_verify_mode => "force_peer"
  }
}

filter {
  mutate {
    add_field => { "pipeline_host" => "{{ inventory_hostname }}" }
  }

  if "jira-security" in [log][file][path] {
    if " authentication." in [message] or "has logged out" in [message] {
      
      grok {
        match => { "message" => "'%{DATA:action_username}'" }
      }  

      grok {
        match => { "message" => "%{IPV4:client_ip}" }
      }
 
      mutate {
        add_field => { 
	  "action_type" => "LOGIN"
          "action_status" => "SUCCESS"
          "hostname" => "%{[host][name]}"
        }
      }
    
      if " authentication." in [message] {
        if "FAILED" in [message] {
          mutate {
            replace => { "action_status" => "FAILURE" }
          }
        }
      }
      else {
        mutate {
          replace => { "action_type" => "LOGOUT" }
        }
      }
     
      prune {
        whitelist_names => ["@timestamp", "_index", "ingest_host", "hostname", "action_username", "action_type", "action_status", "client_ip"]
      }
    }
  }
  else if "catalina" in [log][file][path] {

    grok {
      patterns_dir => ["/etc/logstash/conf.d/patterns"]
      match => { "message" => "%{JAVA_DATE_PATTERN:log_timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
    }

    if "" in [log_level] {

      if "JIRA" in [host][name] {
        mutate {
          add_field => { "error_type" => "jira_server_error" }
        }
      }
      else if "CONF" in [host][name] {
        mutate {        
          add_field => { "error_type" => "conf_server_error" }
        }
      }

      if "ERROR" in [log_level] or "SEVERE" in [log_level] or "FATAL" in [log_level] {
        prune {
          whitelist_names => ["@timestamp", "_index", "ingest_host", "host.name", "log_level", "log_timestamp", "message", "error_type"]
        }
      }
    }
  }
  else {

    if "jira" in [log][file][path] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{DATA:thread} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
        add_field => { "error_type" => "jira_app_error" }
      }
    }
    else if "confluence" in [log][file][path] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
        add_field => { "error_type" => "conf_app_error" }
      }
    }

    if "" in [log_level] {
      if "ERROR" in [log_level] or "SEVERE" in [log_level] or "FATAL" in [log_level] {
        prune {
          whitelist_names => ["@timestamp", "_index", "ingest_host", "host.name", "log_timestamp", "log_level", "message", "thread", "error_type"]
        }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["https://{{ elasticsearch.lb_ip }}:{{ elasticsearch.port }}"]
    index => "{{ jira.pipeline.index_pattern }}"
    ssl_certificate_verification => false
    user => "{{ jira.pipeline.username }}"
    password => "{{ jira.pipeline.password }}"
    ssl => true
  }
}