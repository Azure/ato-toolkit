[ClassVersion("1.0.0.0"), FriendlyName("SqlSetup")]
class MSFT_SqlSetup : OMI_BaseResource
{
    [Write, Description("The action to be performed. Default value is 'Install'."), ValueMap{"Install","Upgrade","InstallFailoverCluster","AddNode","PrepareFailoverCluster","CompleteFailoverCluster"}, Values{"Install","Upgrade","InstallFailoverCluster","AddNode","PrepareFailoverCluster","CompleteFailoverCluster"}] String Action;
    [Write, Description("The path to the root of the source files for installation. I.e and UNC path to a shared resource. Environment variables can be used in the path.")] String SourcePath;
    [Write, EmbeddedInstance("MSFT_Credential"), Description("Credentials used to access the path set in the parameter 'SourcePath'.")] String SourceCredential;
    [Write, Description("Suppresses reboot.")] Boolean SuppressReboot;
    [Write, Description("Forces reboot.")] Boolean ForceReboot;
    [Write, Description("SQL features to be installed.")] String Features;
    [Key, Description("Name of the SQL instance to be installed.")] String InstanceName;
    [Write, Description("SQL instance ID, if different from InstanceName.")] String InstanceID;
    [Write, Description("Product key for licensed installations.")] String ProductKey;
    [Write, Description("Enabled updates during installation.")] String UpdateEnabled;
    [Write, Description("Path to the source of updates to be applied during installation.")] String UpdateSource;
    [Write, Description("Enable customer experience reporting.")] String SQMReporting;
    [Write, Description("Enable error reporting.")] String ErrorReporting;
    [Write, Description("Installation path for shared SQL files.")] String InstallSharedDir;
    [Write, Description("Installation path for x86 shared SQL files.")] String InstallSharedWOWDir;
    [Write, Description("Installation path for SQL instance files.")] String InstanceDir;
    [Write, EmbeddedInstance("MSFT_Credential"), Description("Service account for the SQL service.")] String SQLSvcAccount;
    [Read, Description("Output username for the SQL service.")] String SQLSvcAccountUsername;
    [Write, EmbeddedInstance("MSFT_Credential"), Description("Service account for the SQL Agent service.")] String AgtSvcAccount;
    [Read, Description("Output username for the SQL Agent service.")] String AgtSvcAccountUsername;
    [Write, Description("Collation for SQL.")] String SQLCollation;
    [Write, Description("Array of accounts to be made SQL administrators.")] String SQLSysAdminAccounts[];
    [Write, Description("Security mode to apply to the SQL Server instance. 'SQL' indicates mixed-mode authentication while 'Windows' indicates Windows authentication. Default is Windows."), ValueMap{"SQL", "Windows"}, Values{"SQL", "Windows"}] String SecurityMode;
    [Write, EmbeddedInstance("MSFT_Credential"), Description("SA password, if SecurityMode is set to 'SQL'.")] String SAPwd;
    [Write, Description("Root path for SQL database files.")] String InstallSQLDataDir;
    [Write, Description("Path for SQL database files.")] String SQLUserDBDir;
    [Write, Description("Path for SQL log files.")] String SQLUserDBLogDir;
    [Write, Description("Path for SQL TempDB files.")] String SQLTempDBDir;
    [Write, Description("Path for SQL TempDB log files.")] String SQLTempDBLogDir;
    [Write, Description("Path for SQL backup files.")] String SQLBackupDir;
    [Write, EmbeddedInstance("MSFT_Credential"), Description("Service account for the Full Text service.")] String FTSvcAccount;
    [Read, Description("Output username for the Full Text service.")] String FTSvcAccountUsername;
    [Write, EmbeddedInstance("MSFT_Credential"), Description("Service account for Reporting Services service.")] String RSSvcAccount;
    [Read, Description("Output username for the Reporting Services service.")] String RSSvcAccountUsername;
    [Write, Description("Specifies the install mode for SQL Server Report service."), ValueMap{"SharePointFilesOnlyMode", "DefaultNativeMode", "FilesOnlyMode"}, Values{"SharePointFilesOnlyMode", "DefaultNativeMode", "FilesOnlyMode"}] String RSInstallMode;
    [Write, EmbeddedInstance("MSFT_Credential"), Description("Service account for Analysis Services service.")] String ASSvcAccount;
    [Read, Description("Output username for the Analysis Services service.")] String ASSvcAccountUsername;
    [Write, Description("Collation for Analysis Services.")] String ASCollation;
    [Write, Description("Array of accounts to be made Analysis Services admins.")] String ASSysAdminAccounts[];
    [Write, Description("Path for Analysis Services data files.")] String ASDataDir;
    [Write, Description("Path for Analysis Services log files.")] String ASLogDir;
    [Write, Description("Path for Analysis Services backup files.")] String ASBackupDir;
    [Write, Description("Path for Analysis Services temp files.")] String ASTempDir;
    [Write, Description("Path for Analysis Services config.")] String ASConfigDir;
    [Write, Description("The server mode for SQL Server Analysis Services instance. The default is to install in Multidimensional mode. Valid values in a cluster scenario are MULTIDIMENSIONAL or TABULAR. Parameter ASServerMode is case-sensitive. All values must be expressed in upper case."), ValueMap{"MULTIDIMENSIONAL", "TABULAR", "POWERPIVOT"}, Values{"MULTIDIMENSIONAL", "TABULAR", "POWERPIVOT"}] String ASServerMode;
    [Write, EmbeddedInstance("MSFT_Credential"), Description("Service account for Integration Services service.")] String ISSvcAccount;
    [Read, Description("Output username for the Integration Services service.")] String ISSvcAccountUsername;
    [Write, Description("Specifies the startup mode for SQL Server Sql Engine service."), ValueMap{"Automatic", "Disabled", "Manual"}, Values{"Automatic", "Disabled", "Manual"}] String SqlSvcStartupType;
    [Write, Description("Specifies the startup mode for SQL Server Sql Agent service."), ValueMap{"Automatic", "Disabled", "Manual"}, Values{"Automatic", "Disabled", "Manual"}] String AgtSvcStartupType;
    [Write, Description("Specifies the startup mode for SQL Server Integration service."), ValueMap{"Automatic", "Disabled", "Manual"}, Values{"Automatic", "Disabled", "Manual"}] String IsSvcStartupType;
    [Write, Description("Specifies the startup mode for SQL Server Analysis service."), ValueMap{"Automatic", "Disabled", "Manual"}, Values{"Automatic", "Disabled", "Manual"}] String AsSvcStartupType;
    [Write, Description("Specifies the startup mode for SQL Server Report service."), ValueMap{"Automatic", "Disabled", "Manual"}, Values{"Automatic", "Disabled", "Manual"}] String RSSVCStartupType;
    [Write, Description("Specifies the startup mode for SQL Server Browser service."), ValueMap{"Automatic", "Disabled", "Manual"}, Values{"Automatic", "Disabled", "Manual"}] String BrowserSvcStartupType;
    [Write, Description("The name of the resource group to create for the clustered SQL Server instance. Default is 'SQL Server (InstanceName)'.")] String FailoverClusterGroupName;
    [Write, Description("Array of IP Addresses to be assigned to the clustered SQL Server instance.")] String FailoverClusterIPAddress[];
    [Write, Description("Host name to be assigned to the clustered SQL Server instance.")] String FailoverClusterNetworkName;
    [Write, Description("Specifies the number of tempdb data files to be added by setup.")] UInt32 SqlTempdbFileCount;
    [Write, Description("Specifies the initial size of each tempdb data file in MB.")] UInt32 SqlTempdbFileSize;
    [Write, Description("Specifies the file growth increment of each tempdb data file in MB.")] UInt32 SqlTempdbFileGrowth;
    [Write, Description("Specifies the initial size of each tempdb log file in MB.")] UInt32 SqlTempdbLogFileSize;
    [Write, Description("Specifies the file growth increment of each tempdb data file in MB.")] UInt32 SqlTempdbLogFileGrowth;
    [Write, Description("The timeout, in seconds, to wait for the setup process to finish. Default value is 7200 seconds (2 hours). If the setup process does not finish before this time, and error will be thrown.")] UInt32 SetupProcessTimeout;
    [Write, Description("Feature flags are used to toggle functionality on or off. See the documentation for what additional functionality exist through a feature flag.")] String FeatureFlag[];
};
