{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmName": {
            "type": "string",
            "defaultValue": "simple-vm",
            "metadata": {
                "description": "Name of the virtual machine."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2_v3",
            "metadata": {
                "description": "Size of the virtual machine."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "minLength": 12,
            "metadata": {
                "description": "Password for the Virtual Machine."
            }
        },
        "OSVersion": {
            "type": "string",
            "defaultValue": "2019-Datacenter",
            "allowedValues": [
                "2019-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "managedDiskStorageAccountType": {
            "type": "string",
            "defaultValue": "StandardSSD_LRS",
            "allowedValues": [ "StandardSSD_LRS" ],
            "metadata": {
                "description": ""
            }
        },
        "scriptsUri": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/Azure/ato-toolkit/master/stig/windows/scripts/",
            "metadata": {
                "description": ""
            }
        },
        "vmVirtualNetwork": {
            "type": "string",
            "defaultValue": "stig-vm-vnet",
            "metadata": {
                "description": "Virtual Network for the VM Image."
            }
        },
        "virtualNetworkResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group for the existing virtual network"
            }
        },
        "virtualNetworkNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "metadata": {
                "description": "Is the Virtual Network new or existing for the VM Image."
            }
        },
        "addressPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "Address prefix of the virtual network"
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "subnet1",
            "metadata": {
                "description": "Subnet name for the VM Image."
            }
        },
        "subnetPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "Subnet prefix of the virtual network"
            }
        },
        "vmAvailabilitySetName": {
            "type": "string",
            "defaultValue": "stig-as",
            "metadata": {
                "description": "Availability Set configuration for VM."
            }
        },
        "logsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Log retention in days."
            }
        },
        "diagnosticStorageResourceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Diagnostic Storage account Id."
            }
        },
        "logAnalyticsWorkspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Log Analytics workspace Id."
            }
        }
    },
    "variables": {
        "nicName": "[concat(parameters('vmName'), '-nic')]",
        "vnetId": {
            "new": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vmVirtualNetwork'))]",
            "existing": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Storage/virtualNetworks',parameters('vmVirtualNetwork'))]"
        },
        "subnetRef": "[concat(variables('vnetId')[parameters('virtualNetworkNewOrExisting')],'/subnets/',parameters('subnetName'))]",
        "networkSecurityGroupName": "[concat(parameters('vmName'), '-nsg')]",
        "availabilitySetId": {
            "id": "[if(equals(parameters('vmAvailabilitySetName'), ''), json('null'), resourceId('Microsoft.Compute/availabilitySets', parameters('vmAvailabilitySetName')))]"
        },
        "requiredModulesFile": "RequiredModules.ps1",
        "installPSModulesFile": "InstallModules.ps1",
        "storageApiVersion" : "2019-06-01"
    },
    "resources": [
        {
            "type": "Microsoft.Network/networkSecurityGroups",            
            "apiVersion": "2020-06-01",            
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-3389",
                        "properties": {
                            "priority": 1000,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "3389",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",            
            "apiVersion": "2020-06-01",            
            "name": "[parameters('vmVirtualNetwork')]",
            "location": "[parameters('location')]",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('subnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",            
            "apiVersion": "2020-06-01",
            "name": "[variables('nicName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vmVirtualNetwork'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {            
            "type": "Microsoft.Network/networkInterfaces/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(variables('nicName'), '/Microsoft.Insights/service')]",
            "location": "[parameters('location')]",            
            "condition": "[and(not(equals(parameters('diagnosticStorageResourceId'), '')), not(equals(parameters('logAnalyticsWorkspaceId'), '')))]",
            "dependsOn": [
                "[variables('nicName')]"
            ],
            "copy": {
                "name": "nicDiagnosticLoop",
                "count": 1
            },
            "properties": {
                "storageAccountId": "[parameters('diagnosticStorageResourceId')]",
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "timeGrain": null,
                        "enabled": true,
                        "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('logsRetentionInDays')]"
                        }
                    }
                ]
            }
        },
        {            
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2019-03-01",     
            "name": "[parameters('vmAvailabilitySetName')]",
            "location": "[parameters('location')]",
            "condition": "[not(equals(parameters('vmAvailabilitySetName'), ''))]",
            "properties": {
                "platformFaultDomainCount": 3,
                "platformUpdateDomainCount": 5
            },
            "sku": {
                "name": "Aligned"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2020-06-01",
            "name": "[parameters('vmName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
                "[parameters('vmAvailabilitySetName')]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[parameters('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "[parameters('OSVersion')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('managedDiskStorageAccountType')]"
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                        }
                    ]
                },
                "availabilitySet": "[if(equals(parameters('vmAvailabilitySetName'), ''), json('null'), variables('availabilitySetId'))]",
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "[if(equals(parameters('diagnosticStorageResourceId'), ''), false(), true())]",
                        "storageUri": "[if(not(equals(parameters('diagnosticStorageResourceId'), '')), reference(parameters('diagnosticStorageResourceId'), variables('storageApiVersion')).primaryEndpoints.blob, json('null'))]"
                    }
                }
            },
            "resources": [
                {
                    "type": "extensions",
                    "apiVersion": "2017-03-30",
                    "name": "install-powershell-modules",
                    "location": "[parameters('location')]",
                    "condition": "[not(equals(parameters('scriptsUri'), ''))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": [
                                "[concat(parameters('scriptsUri'), variables('requiredModulesFile'))]",
                                "[concat(parameters('scriptsUri'), variables('installPSModulesFile'))]"
                            ],
                            "timestamp": 123456788,
                            "commandToExecute": "[concat('PowerShell -ExecutionPolicy Unrestricted -File ', variables('installPSModulesFile'))]"
                        }
                    }
                },
                {
                    "type": "extensions",
                    "apiVersion": "2017-03-30",
                    "name": "[concat('setup-win-dsc', '-online')]",
                    "location": "[parameters('location')]",
                    "condition": "[not(equals(parameters('scriptsUri'), ''))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'install-powershell-modules')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "wmfVersion": "latest",
                            "configuration": {
                                "url": "[concat(parameters('scriptsUri'), 'WindowsServer.ps1.zip')]",
                                "script": "WindowsServer.ps1",
                                "function": "WindowsServer"
                            },
                            "configurationArguments": {
                                "IsOffline": false
                            }
                        }
                    }
                }
            ]
        },
        {            
            "type": "Microsoft.Compute/virtualMachines/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(parameters('vmName'), '/Microsoft.Insights/service')]",
            "location": "[resourceGroup().location]",
            "condition": "[and(not(equals(parameters('diagnosticStorageResourceId'), '')), not(equals(parameters('logAnalyticsWorkspaceId'), '')))]",
            "dependsOn": [
                "[parameters('vmName')]"
            ],
            "properties": {
                "storageAccountId": "[parameters('diagnosticStorageResourceId')]",
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true,
                        "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('logsRetentionInDays')]"
                        }
                    }
                ],
                "logs": []
            }
        }
    ],
    "outputs": {
    }
}